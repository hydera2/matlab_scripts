%% Directories
clear;
close all;
cd('/Users/amnahyder/Research/MATLAB/brainstorm3');
brainstorm;
PATHIN  = fullfile('/Users/amnahyder/Research/TestFiles/');      % path containing rawdata                   
PATHOUT = fullfile('/Users/amnahyder/Research/TestFiles/OUTPUT/');  % path for script output

ProtocolInfo = bst_get('ProtocolInfo'); 
Path_bs = [ProtocolInfo.STUDIES filesep];

%elec_file = fullfile('/Users/amnahyder/Research/DependentFiles','projected_channels.sfp')
elec_file = fullfile('/Users/amnahyder/Research/MATLAB/brainstorm3/defaults/eeg/ICBM152/channel_GSN_HydroCel_256_E1.mat')
% specific brainstorm variable used for all processes
sFiles = [];


cd(PATHIN)
list=dir('*.erp');   
% list=dir('*.set');

len=length(list);   

for s = 2%:len
    subj{s} = strrep(list(s).name, list(s).name(4:end), '');
    % start a new report
    bst_report('Start', sFiles);
    
    % process: Import MEG/EEG: Existing epochs
    sFiles = bst_process('CallProcess', 'process_import_data_epoch', ...
        sFiles, [], ...
        'subjectname',  subj{s}, ...
        'condition',    '', ...
        'datafile',     {{[PATHIN list(s).name ]}, 'EEG-ERPLAB'}, ...
        'iepochs',      [], ...
        'eventtypes',   '', ...
        'createcond',   0, ...
        'channelalign', 1, ...
        'usectfcomp',   1, ...
        'usessp',       1, ...
        'freq',         [], ...
        'baseline',     []);
    
    
    % Process: Set channel file
    sFiles = bst_process('CallProcess', 'process_import_channel', sFiles, [], ...
    'usedefault',   67, ...  % ICBM152: GSN 256
    'channelalign', 1, ...
    'fixunits',     1, ...
    'vox2ras',      1);

    
    % process: Compute covariance (noise or data)
    sFiles = bst_process('CallProcess', 'process_noisecov', sFiles, [], ...
        'baseline',       [-0.5, -0.001], ...
        'datatimewindow', [], ...
        'sensortypes',    '', ...
        'target',         1, ...
        'dcoffset',       1, ...
        'identity',       0, ...
        'copycond',       0, ...
        'copysubj',       0, ...
        'replacefile',    1);
    
    
    if s == 1
        sFiles = bst_process('CallProcess', 'process_headmodel', sFiles, [], ...
            'comment',     '', ...
            'sourcespace', 1, ...  % Cortex surface
            'volumegrid',  [], ...
            'meg',         2, ...  % Single sphere
            'eeg',         3, ...  % OpenMEEG BEM
            'ecog',        2, ...  % OpenMEEG BEM
            'seeg',        2, ...  % OpenMEEG BEM
            'openmeeg',    struct(...
            'BemFiles',     {{}}, ...
            'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
            'BemCond',      [1, 0.0125, 1], ...
            'BemSelect',    [1, 1, 1], ...
            'isAdjoint',    0, ...
            'isAdaptative', 1, ...
            'isSplit',      0, ...
            'SplitLength',  4000));
        % Get new head model file
        sHeadModel = bst_get('HeadModelForStudy', sFiles(1).iStudy);
    else
        %copy head model computed for the first participant to the current
        %subject
        [sDefaultStudy, iDefaultStudy] = bst_get('DefaultStudy', sFiles(1).SubjectFile)
        db_add(iDefaultStudy , sHeadModel.FileName);
    end
    
    % process: Compute sources (2016)
    sFiles = bst_process('CallProcess', 'process_inverse_2016', sFiles, [], ...
        'output',  2, ...  % Kernel only: one per file
        'inverse', struct(...
        'Comment',        'dSPM: EEG', ...
        'InverseMethod',  'minnorm', ...
        'InverseMeasure', 'dspm', ...
        'SourceOrient',   {{'fixed'}}, ...
        'Loose',          0.2, ...
        'UseDepth',       1, ...
        'WeightExp',      0.5, ...
        'WeightLimit',    10, ...
        'NoiseMethod',    'reg', ...
        'NoiseReg',       0.1, ...
        'SnrMethod',      'fixed', ...
        'SnrRms',         1e-06, ...
        'SnrFixed',       3, ...
        'ComputeKernel',  1, ...
        'DataTypes',      {{'EEG'}}));

    sFiles = [];
end   
